package yeonsup.java.leetcode;


import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

class Candy {

    int x;
    int y;

    public Candy(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class CandyCrush {


    // 1. 탐색
    // - 횡 탐색과 종 탐색

    // 횡 탐색
    public Queue<Candy> searchColCandyCrush(int[][] board) {
        Queue<Candy> colQueue = new LinkedList<>();
        int[][] visited = new int[board.length][board[0].length];

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length - 2; j++) {
                if(visited[i][j] == 0 && board[i][j] == board[i][j + 1] && board[i][j] > 0) {
                    int start = j;
                    int end = j + 1;

                    while (end < board[i].length) {
                        if (board[i][start] != board[i][end]) break;
                        end++;
                    }

                    if(end - start > 2) {
                        for (int k = start; k < end; k++) {
                            colQueue.add(new Candy(i, k));
                            visited[i][k] = 1;
                        }
                    }
                }
            }
        }

        return colQueue;
    }

    private Queue<Candy> searchRowCandyCrush(int[][] board) {
        Queue<Candy> rowQueue = new LinkedList<>();
        int[][] visited = new int[board.length][board[0].length];

        for (int i = 0; i < board[0].length; i++) {
            for (int j = 0; j < board.length - 2; j++) {
                if(visited[j][i] == 0 && board[j][i] == board[j + 1][i] && board[j][i] > 0) {
                    int start = j;
                    int end = j + 1;

                    while (end < board.length) {
                        if (board[start][i] != board[end][i]) break;
                        end++;
                    }

                    if(end - start > 2) {
                        for (int k = start; k < end; k++) {
                            rowQueue.add(new Candy(k, i));
                            visited[k][i] = 1;
                        }
                    }
                }
            }

        }

        return rowQueue;
    }

    // 2. crush
    boolean crush(int[][] board) {
        boolean result = false;
        Queue<Candy> colQueue = searchColCandyCrush(board);
        Queue<Candy> rowQueue = searchRowCandyCrush(board);

        if(!colQueue.isEmpty() || !rowQueue.isEmpty()) result = true;

        while (!colQueue.isEmpty()) {
            Candy colCandy = colQueue.poll();
            if(board[colCandy.x][colCandy.y] > 0) board[colCandy.x][colCandy.y] = 0;
        }

        while (!rowQueue.isEmpty()) {
            Candy rowCandy = rowQueue.poll();
            if(board[rowCandy.x][rowCandy.y] > 0) board[rowCandy.x][rowCandy.y] = 0;
        }

        return result;
    }


    // 3. 빈 공간 채우기
    void drop(int[][] board) {
        for (int i = 0; i <  board[0].length; i++) {
            LinkedList<Integer> list = new LinkedList<>();
            for (int j = board.length - 1; j >= 0; j--) {
                list.add(board[j][i]);
            }

            int j = 0;
            while (j < list.size()) {
                if(list.get(j) == 0) {
                    list.remove(j);
                } else {
                    j++;
                }
            }

            for (int k = board.length - 1; k >= 0; k--) {
                Integer candy = list.poll();
                board[k][i] = candy != null ? candy : 0;
            }
        }
    }

    public int[][] candyCrush(int[][] board) {
        while (true) {
            boolean isCrush = crush(board);
            if(isCrush) drop(board);
            else break;
        }

        return board;
    }

    public static void main(String[] args) {
        CandyCrush candyCrush = new CandyCrush();

        int[][] ints = candyCrush.candyCrush(new int[][]{
                {110, 5, 112, 113, 114},
                {210, 211, 5, 213, 214},
                {310, 311, 3, 313, 314},
                {410, 411, 412, 5, 414},
                {5, 1, 512, 3, 3},
                {610, 4, 1, 613, 614},
                {710, 1, 2, 713, 714},
                {810, 1, 2, 1, 1},
                {1, 1, 2, 2, 2},
                {4, 1, 4, 4, 1014}
        });

        for (int[] anInt : ints) {
            System.out.println(Arrays.toString(anInt));
        }
    }
}



/*
                {110, 5, 112, 113, 114},
                {210, 211, 5, 213, 214},
                {310, 311, 3, 313, 314},
                {410, 411, 412, 5, 414},
                {5, 1, 512, 3, 3},
                {610, 4, 1, 613, 614},
                {710, 1, 2, 713, 714},
                {810, 1, 2, 1, 1},
                {1, 1, 2, 2, 2},
                {4, 1, 4, 4, 1014}
 */


/*
                {
                        {1,4,3,5,4,4,1,2,1,4,5,2,5,2,2,2,1,1,5,2,1,3,1,4,2,5,4,5,3,5,3,4,5,3,5,1,1,3,5,3,5,2,1,2,2,3,5,5,2,3},
                        {1,3,4,3,1,2,1,1,3,4,3,3,3,1,2,1,3,2,2,4,2,1,4,1,3,4,3,1,4,2,2,2,3,5,3,2,3,5,3,2,4,2,4,3,1,1,1,3,2,5},
                        {4,4,1,3,3,4,3,2,1,4,4,1,1,5,1,3,4,1,1,3,1,3,3,1,3,4,1,3,5,2,1,2,5,4,3,2,1,4,1,3,5,3,4,1,2,1,5,5,2,3},
                        {4,1,5,5,3,3,2,5,2,3,1,1,5,3,4,5,5,2,4,2,2,2,1,2,2,2,5,4,4,2,4,2,1,5,3,2,5,4,5,5,5,1,2,4,5,3,4,4,3,5},
                        {2,5,5,5,1,5,5,5,3,2,5,2,2,4,1,3,4,1,3,5,2,1,4,2,4,3,4,3,1,3,3,1,3,5,1,1,4,2,2,5,2,1,3,4,5,1,2,1,1,2},
                        {4,2,4,3,2,4,4,4,5,3,1,1,2,4,1,1,4,5,5,4,4,3,4,5,5,3,3,5,1,2,2,1,4,2,3,1,2,1,1,2,3,4,3,4,4,5,2,3,4,2},
                        {2,1,2,1,2,3,3,4,3,5,5,2,3,5,2,4,4,4,5,1,5,1,1,2,2,2,5,3,3,4,5,2,2,1,3,2,4,2,2,3,1,3,3,2,5,5,2,2,3,1},
                        {1,4,2,5,3,5,4,1,3,5,2,2,1,4,3,2,5,2,5,4,5,3,3,5,2,3,2,4,3,2,3,1,3,5,1,5,5,1,1,4,1,2,1,3,5,3,2,4,3,1},
                        {2,2,3,5,4,4,2,1,3,4,2,3,5,2,5,4,2,5,1,1,1,2,5,1,3,3,5,3,2,2,3,1,5,3,1,2,1,4,2,1,2,3,2,4,1,3,1,3,5,2},
                        {3,5,1,5,3,2,3,3,3,5,2,1,4,5,4,4,4,2,4,1,4,1,2,5,1,5,3,4,3,5,5,2,4,3,1,5,3,4,3,3,3,5,5,2,3,4,1,5,2,5},
                        {2,5,2,4,4,2,3,1,1,5,1,1,2,4,5,3,3,1,2,4,4,3,2,5,1,1,1,3,2,4,2,5,4,4,3,3,3,1,4,3,4,1,2,2,5,3,5,1,1,1},
                        {4,5,1,3,1,3,1,3,2,1,3,3,5,5,5,3,2,3,1,2,4,4,1,3,4,2,3,4,4,3,5,4,3,1,1,2,4,1,2,4,2,4,4,4,1,5,4,2,2,4},
                        {2,4,5,2,4,2,3,5,4,1,5,5,4,4,4,4,3,4,3,4,2,3,5,2,4,2,2,4,5,2,3,4,5,5,3,2,1,4,1,4,1,4,5,4,4,2,5,5,3,1},
                        {2,3,5,2,3,5,3,5,3,2,1,5,3,5,5,5,1,2,1,2,4,3,3,3,1,3,4,2,5,4,4,3,2,4,3,3,2,3,3,2,3,2,4,4,3,2,5,2,1,5},
                        {1,4,4,5,5,4,4,5,5,1,4,2,1,3,1,1,2,2,3,3,2,4,5,3,1,3,4,3,5,5,1,2,2,3,3,3,1,5,3,5,2,1,4,4,1,3,1,5,2,3},
                        {1,4,3,2,5,4,4,4,3,5,3,4,4,2,5,3,1,5,1,5,1,1,1,5,5,5,5,2,3,4,3,2,1,2,2,2,3,2,1,3,4,3,3,4,4,1,5,3,2,4},
                        {5,5,1,2,4,5,2,2,5,1,5,4,4,5,3,4,3,4,5,3,4,1,3,3,3,4,4,1,4,3,4,1,3,2,1,1,3,3,2,2,3,1,3,4,4,1,5,3,4,3},
                        {2,4,4,2,4,3,5,1,4,4,5,3,4,4,3,2,1,1,2,5,2,2,3,2,1,1,1,5,4,1,1,2,3,5,5,4,5,4,1,2,1,3,4,3,3,5,3,5,3,1},
                        {3,5,1,5,5,4,4,3,3,2,5,2,2,2,4,1,5,4,4,5,5,3,4,2,2,5,2,4,4,3,2,5,4,5,3,2,4,2,2,5,1,1,5,2,1,1,4,1,1,3},
                        {2,1,1,2,3,2,4,3,2,2,5,3,2,4,3,3,3,4,4,2,3,3,5,3,4,5,1,4,5,5,2,1,2,3,1,1,2,2,4,1,2,2,5,4,3,5,3,5,1,3},
                        {5,4,1,3,3,3,5,5,5,5,2,4,3,2,1,3,5,5,3,5,2,3,3,5,3,3,4,1,2,1,4,5,2,2,3,3,4,1,4,1,1,1,5,5,4,5,2,3,3,5},
                        {4,2,5,4,4,1,2,4,2,3,5,1,2,2,5,1,3,5,5,3,5,5,1,3,2,1,1,5,1,4,2,5,2,1,3,4,4,4,5,1,3,2,1,3,4,1,5,2,4,2},
                        {3,5,4,3,1,1,3,2,3,2,1,2,1,5,1,2,3,1,4,4,5,5,5,3,5,4,5,2,3,5,2,5,3,1,1,4,2,5,2,2,5,3,1,3,1,4,1,5,1,5},
                        {5,2,1,5,1,5,3,1,4,1,2,4,4,2,4,5,4,3,1,1,2,3,4,3,2,1,3,4,5,3,4,2,5,5,4,3,2,2,5,1,4,3,4,3,3,2,2,5,5,5},
                        {1,3,2,5,2,2,1,3,3,2,5,3,5,4,4,3,2,1,5,2,4,3,4,3,1,4,1,1,3,2,5,4,1,4,3,1,5,2,2,3,4,5,5,2,4,2,4,3,4,2},
                        {3,1,1,2,5,3,1,4,3,2,2,2,1,3,2,1,3,4,1,1,5,1,5,5,1,2,5,4,1,3,1,4,2,5,1,4,5,1,3,4,2,3,4,3,4,2,5,4,4,2},
                        {1,1,3,4,3,2,4,3,4,2,4,5,5,4,3,5,1,1,3,1,4,5,3,1,4,2,5,5,4,5,3,2,2,5,4,4,2,2,4,1,4,1,1,3,3,4,4,5,4,5},
                        {1,3,1,3,1,3,3,2,1,4,1,3,1,2,3,5,2,2,2,4,1,4,1,2,5,1,5,2,4,5,1,1,2,1,2,4,2,2,5,4,3,4,3,5,4,1,1,5,5,4},
                        {3,3,1,4,5,5,1,3,3,5,4,5,3,2,3,4,3,3,4,2,2,5,5,2,5,1,5,5,4,2,5,1,2,4,5,2,4,1,4,4,5,3,1,5,1,2,4,1,2,4},
                        {4,2,5,4,4,5,3,5,5,3,5,2,2,5,3,2,1,2,5,4,5,1,2,1,5,5,5,2,1,3,2,2,4,2,3,1,5,3,5,2,3,5,3,5,3,1,4,4,4,4},
                        {5,1,4,1,3,5,4,4,1,4,4,5,2,1,4,2,2,1,5,4,1,5,1,1,5,2,3,4,2,2,3,3,2,1,3,4,4,2,2,1,1,5,5,5,3,4,3,2,1,4},
                        {3,1,4,4,5,3,4,3,1,3,1,5,4,1,2,5,5,5,3,2,5,3,5,3,4,3,5,1,5,2,3,5,1,4,5,1,5,3,1,4,5,1,3,5,2,2,4,3,4,1},
                        {1,2,4,5,1,1,3,3,4,1,2,4,1,1,5,1,5,1,1,1,3,1,4,1,2,4,2,5,3,4,1,2,3,3,4,5,5,3,3,1,1,1,3,1,3,5,4,3,5,2},
                        {4,4,2,3,1,3,1,1,5,2,5,2,2,3,4,3,4,5,1,5,5,3,2,5,3,4,5,3,3,5,4,1,1,4,3,2,4,5,1,3,3,2,3,5,4,1,4,5,3,5},
                        {2,5,2,1,1,2,1,5,3,3,4,1,2,1,1,3,4,2,3,4,2,4,3,4,1,3,1,3,3,3,1,2,4,5,2,1,2,5,3,5,2,3,2,4,4,4,1,2,1,2},
                        {3,5,5,1,3,1,3,3,4,1,1,2,4,5,4,4,1,4,5,3,1,4,2,3,5,3,2,3,5,1,1,3,3,5,2,3,2,1,5,4,5,1,2,4,5,5,1,2,3,2},
                        {2,1,1,3,1,4,4,5,3,2,4,3,2,4,2,5,5,5,1,5,5,5,5,4,4,4,3,4,2,5,1,3,4,5,3,5,1,5,1,2,3,5,5,5,1,4,4,3,2,2},
                        {2,5,2,1,2,3,5,3,2,5,5,2,3,2,2,2,4,1,4,2,5,2,1,2,5,5,4,2,5,3,2,5,1,4,3,4,2,2,4,3,4,2,3,3,2,1,4,5,4,1},
                        {5,2,2,3,5,1,3,5,2,1,1,5,3,5,2,1,2,2,1,2,5,3,1,1,1,4,4,4,4,4,2,4,2,4,5,1,3,5,2,3,2,1,1,5,3,4,4,5,2,4},
                        {3,2,5,1,4,3,4,5,1,1,2,4,4,1,1,1,1,5,1,3,4,4,4,5,4,1,1,2,4,3,3,3,1,5,5,2,1,2,5,5,4,1,2,1,4,4,3,5,4,4},
                        {5,3,5,3,4,3,4,2,5,5,1,4,4,4,2,3,4,5,1,1,3,1,2,4,4,1,1,4,5,4,2,2,5,1,5,5,4,4,3,2,3,4,2,5,5,2,4,5,1,3},
                        {2,5,4,3,4,2,3,2,2,4,2,1,2,1,2,4,2,2,4,3,3,2,1,2,5,4,2,4,2,3,4,2,5,2,5,2,1,3,3,4,2,2,1,2,2,3,1,3,3,3},
                        {3,3,3,4,4,4,4,2,5,5,5,5,1,4,1,4,4,4,5,4,2,4,1,3,3,1,4,2,3,5,1,5,3,5,4,4,3,4,5,2,3,2,4,2,4,5,3,3,5,5},
                        {2,5,4,5,2,3,1,1,2,1,3,2,5,5,2,4,2,3,1,4,5,5,1,5,1,4,1,2,3,2,2,3,2,2,1,5,1,1,4,2,4,2,4,4,2,3,4,1,5,2},
                        {1,2,5,2,5,3,4,3,1,4,2,5,5,5,4,5,5,4,3,5,3,1,2,4,1,4,3,2,5,3,2,5,2,4,4,5,1,3,3,3,1,2,2,5,5,1,3,2,3,1},
                        {3,3,5,5,4,2,2,3,2,4,3,1,1,1,2,4,2,4,3,4,1,4,2,3,3,5,5,5,5,5,1,1,3,4,3,2,3,2,3,3,4,1,4,1,1,5,5,3,2,2},
                        {2,1,4,4,3,1,4,1,4,5,2,1,1,5,5,4,1,2,1,3,3,5,1,5,3,2,2,4,3,5,5,3,4,1,5,1,5,4,4,4,3,3,5,1,4,4,1,3,3,5},
                        {5,5,5,2,1,4,5,2,1,3,2,3,4,2,2,5,4,1,4,3,3,5,4,3,3,4,3,4,2,4,1,3,2,4,4,1,5,4,1,1,2,1,4,2,2,5,2,3,5,1},
                        {2,2,3,2,5,2,5,5,2,2,2,3,3,5,4,1,5,3,4,2,5,1,2,1,1,5,2,2,1,3,1,1,3,5,5,3,5,1,5,3,5,4,5,1,2,1,1,5,1,5},
                        {1,2,4,1,3,3,2,5,1,3,4,4,1,5,4,5,1,3,3,3,3,2,2,5,4,3,1,2,5,1,2,2,3,4,1,1,4,1,3,2,4,4,1,3,1,3,3,2,4,5}}
* */